#ifndef TIME_H
#define TIME_H
#include <chrono>
#include <cstdint>
#include <optional>
#include <string>

using ms_fmt = std::string;

class DateTime
{
  public:
    explicit DateTime() = default;

    /**
     * @brief Возвращает текущую дату в соответствии с заданной строкой, по-умолчанию используется ISO-8601(YYYY-MM-DDThh:mm:ss[.SSS])
     * @param Строка в соответствии с которой необходимо провести форматирование
     * @details Так как стандартом не определено форматирование мсек то их необходимость доставляется опциональным аргументом
     * Год:
     * |Символ | Значение                                 |
     * --------|------------------------------------------|
     * |Y      | Год четырехзначное значение например 2017|
     * |y      | Год дузначное значение например        17|
     * |C      | Первые две цифры года  например      20  |
     *
     * Месяц:
     * |Символ  | Значение                                    |
     * |--------|---------------------------------------------|
     * |b       |Аббривиатура  месяца например Окт            |
     * |h       |Аббривиатура  месяца например Окт            |
     * |B       |Полное наименование месяца например Октябрь  |
     * |m       |Числовое представление месяца например 10    |
     *
     * Неделя:
     * |Символ  | Значение                                    |
     * |--------|---------------------------------------------|
     * |U       |Текстовое представление номера недели в году |
     * |W       |Цифровое представление номера недели в году  |
     * |V       |ISO 8601 представление номера недели         |
     *
     * День:
     * |Символ  | Значение                                                                      |
     * |--------|-------------------------------------------------------------------------------|
     * |a       |Аббривиатура дня напримепр Пн.                                                 |
     * |A       |Полное обозначение дня например Понедельник                                    |
     * |u       |Обозначение дня недели в цифровом виде, например для понедельника будет цифра 1|
     *
     * Час,минута, секунда:
     * |Символ  | Значение                                         |
     * |--------|--------------------------------------------------|
     * |H       |Цифровое представление часа в 24 часовом формате  |
     * |I       |Цифровое представление часа в 12 часовом формате  |
     * |M       |Цифровое представление минуты                     |
     * |S       |Цифровое представление секунды                    |
     *
     * Дополнительно:
     * |Символ  | Значение                                                   |
     * |--------|------------------------------------------------------------|
     * |с       |Стандартное представление времени Воскр Окт 17 04:41:13     |
     * |x       |Представление даты в зависимости от текущей локали системы  |
     * |X       |Преставление времени в завсимости от текущуей локали системы|
     * |D       |Еквивалентно "%m/%d/%y"                                     |
     * |F       |Еквивалентно "%Y-%m-%d" (ISO 8601 формат)                   |
     * |r       |Локально зависимое 12 часовое представление времени         |
     * |R       |Еквивалентно  "%H:%M"                                       |
     * |T       |Еквивалентно  "%H:%M:%S" (ISO 8601 формат)                  |
     * |P       |Подпись A.M. P.M в  локализированом формате                 |
     * |z       |Смещение относительно UTC, в локальном представлении или пустая строка если нет информации о временной зоне|
     * |Z       |Тоже что и z только аббривиатура
     *
     * @link https://en.cppreference.com/w/cpp/io/manip/put_time
     */
    std::string getCurrentTimestampStr(const std::string& format = "%d-%m-%Y_%H:%M:%S", std::optional< ms_fmt > = ".") const;
    std::string getTimestampStr(const uint64_t msSinceEpoch, const std::string& format = "%d-%m-%Y_%H:%M:%S", std::optional< ms_fmt > = ".") const;
    uint64_t    getMsSinceEpoh() const;
};

/**
 * @brief Класс предназначается для измерения отрезка времени между двумя точками во времени
 */
class Timer
{
  public:
    /**
     * @brief Конструктор класса
     * @param  Начать отсчет времни с момента создания объекта
     */
    Timer(bool startAtCreation = false);

    /**
     * @brief Запускает таймер
     */

    void start();
    /**
     * @brief Останавливает таймер возвращает разницу между вызовом start или конструктором и вызовом этого метода
     * @return Дельта времени в мс, если таймер небыл запущен возвращает 0
     */
    uint64_t stop();

    uint64_t getLap();

  private:
    bool                                  started_ = false;
    std::chrono::steady_clock::time_point timepointStart_;
};

#endif  // TIME_H
